class No:
    """
    A estrutura b√°sica de uma √°rvore √© o n√≥, ele possui apenas 3 atributos:
    - Carga: Onde o dado √© guardado
    - Lados direito e esquerdo: Para fazer conex√£o com outros n√≥s

    E possui apenas o m√©todo str que retorna em string o que est√° armazenado no n√≥."""

    def __init__(self, carga) -> None:
        self.carga = carga
        self.dir = None
        self.esq = None

    def __str__(self) -> str:
        return str(self.carga)


class Arvore:
    """
    A √°rvore possui 3 atributos:
    - Ra√≠z: Onde armazenamos o primeiro n√≥ da √°rvore
    - Cursor: Vai servir para percorrer a √°rvore e √© necess√°rio para fazer a inser√ß√£o e remo√ß√£o dos n√≥s.
    - Tamanho: Serve apenas para retornar a quantidade de elementos na √°rvore, este pode ser um atributo ou um m√©todo. Nessa implementa√ß√£o utilizei o tamanho como atributo, ent√£o a cada inser√ß√£o ou remo√ß√£o o tamanho deve ser atualizado.
    """

    def __init__(self, raiz=None) -> None:
        self.tamanho = 0
        if raiz is None:
            self.raiz = raiz
        else:
            self.raiz = No(raiz)
            self.tamanho = 1
        self.cursor = self.raiz

    def estaVazia(self):
        return self.tamanho == 0

    def criaRaiz(self, carga: any) -> bool:
        if self.raiz is None:
            self.raiz = No(carga)
            self.tamanho = 1
            return True
        return False

    def getRaiz(self) -> any:
        if self.raiz is not None:
            return self.raiz.carga
        return None

    # Inser√ß√£o e remo√ß√£o
    """
        O cursor √© necess√°rio para qualquer opera√ß√£o de inser√ß√£o ou remo√ß√£o, a ideia √© utilizar o cursor para percorrer os n√≥s da √°rvore e assim inserir ou remover.

        Inser√ß√£o: √â feita a atrav√©s dos m√©todos adicionaDir e adicionaEsq, no n√≥ que o cursor est√° apontando. 
        Ex.:
                        50
                    /       \
                10            35
        P/ adicionar o valor 100, no lado esquerdo do n√≥ 10, √© necess√°rio:
        - Primeiramente utilizar o m√©todo descerEsq, pois o cursor come√ßa apontando para a ra√≠z (50)
        - Agora que o cursor est√° apontando para o n√≥ 10, podemos utilizar o m√©todo adicionaEsq.
        Res.:
                        50
                    /       \
                10            35
               /            
            100

    """

    # Retorna a posi√ß√£o do cursor
    def getCursor(self) -> any:
        if self.cursor is not None:
            return self.cursor.carga
        return None

    def descerEsq(self):
        if self.cursor is not None and self.cursor.esq is not None:
            self.cursor = self.cursor.esq

    def descerDir(self):
        if self.cursor is not None and self.cursor.dir is not None:
            self.cursor = self.cursor.dir

    # Cursor volta a apontar p/ raiz
    def resetCursor(self):
        self.cursor = self.raiz

    # M√©todo retorna True quando o n√≥ n√£o possui filhos
    def __ehFolha(self, no: "No") -> bool:
        return no.dir == no.esq == None

    # A remo√ß√£o segue a mesma l√≥gica da inser√ß√£o, por√©m s√≥ √© poss√≠vel remover um n√≥ folha.
    def removeEsq(self):
        if self.cursor is not None and self.__ehFolha(self.cursor.esq):
            carga = self.cursor.esq.carga
            self.cursor.esq = None
            self.tamanho -= 1
            return carga
        return None

    def removeDir(self):
        if self.cursor is not None and self.__ehFolha(self.cursor.dir):
            carga = self.cursor.dir.carga
            self.cursor.dir = None
            self.tamanho -= 1
            return carga
        return None

    def adicionaEsq(self, carga) -> bool:
        if self.cursor is not None and self.cursor.esq is None:
            self.cursor.esq = No(carga)
            self.tamanho += 1
            return True
        return False

    def adicionaDir(self, carga) -> bool:
        if self.cursor is not None and self.cursor.dir is None:
            self.cursor.dir = No(carga)
            self.tamanho += 1
            return True
        return False

    """
        Perceba que a partir desta linha temos m√©todos com mesmo nome p√∫blicos e um privados, essa abordagem √© utilizada pois os privados precisam usar os n√≥s para percorrer a √°rvore. 

        Por exemplo, o m√©todo de busca tem apenas um par√¢metro, o valor a ser procurado, por√©m √© necess√°rio percorrer √°rvore a partir da raiz at√© os n√≥s folhas para saber se esse valor est√° ou n√£o na √°rvore.

        M√©todos p√∫blico: O que o usu√°rio quer acessar.
        M√©todos privados: O ponto de partida desse m√©todo na √°rvore. 
    """

    # Exibe a √°rvore
    def preordem(self):
        self.__preordem(self.raiz)

    def __preordem(self, no: "No"):
        if no is not None:
            print(f"{no.carga}", end=" ")
            self.__preordem(no.esq)
            self.__preordem(no.dir)

    def posordem(self):
        self.__posordem(self.raiz)

    def __posordem(self, no: "No"):
        if no is not None:
            self.__posordem(no.esq)
            self.__posordem(no.dir)
            print(f"{no.carga}", end=" ")

    def emordem(self):
        self.__emordem(self.raiz)

    def __emordem(self, no: "No"):
        if no is not None:
            self.__emordem(no.esq)
            print(f"{no.carga}", end=" ")
            self.__emordem(no.dir)

    # M√©todo recursivo para retornar o tamanho
    def __tamanho(self, no: No) -> int:
        """
        Com este m√©todo recursivo √© poss√≠vel eliminar o atributo tamanho da √°rvore.

        E funciona da seguinte forma:
        Quando o n√≥ checado for vazio ele retorna 0, se n√£o for vazio retorna 1 e chama o m√©todo para seu filho esquerdo e direito.
        """
        if no is None:
            return 0
        return 1 + (self.__tamanho(no.esq) + self.__tamanho(no.dir))

    def __len__(self):
        return self.__tamanho(self.raiz)

    # Utilizando o atributo tamanho
    # def __len__(self):
    #     return self.tamanho

    """
        O m√©todo de busca serve para procurar um elemento na √°rvore, a partir de uma carga (chave), e retornar um booleano. 
        
    """

    def busca(self, chave: any) -> bool:
        return self.__busca(chave, self.raiz)

    def __busca(self, chave: any, no: "No"):
        """
        Caso 1: N√≥s vazios n√£o possuem filhos, ent√£o retornamos falso.
        Caso 2: Encontramos a chave, retorna True
        Se n√£o est√° neste n√≥, pode estar no lado esquerdo ou direito.
        Caso 3: Verificamos do lado esquerdo e a chave foi encontrada, retorna True
        Caso 4: Se n√£o, retorne o que tiver no lado direito.

        """
        if no is None:
            return False
        if chave == no.carga:
            return True
        if self.__busca(chave, no.esq):
            return True
        else:
            return self.__busca(chave, no.dir)

    def go(self, chave: any):
        no = self.__go(chave, self.raiz)
        if no is not None:
            return no
        else:
            return None

    def __go(self, chave, no: "No"):
        """
        O Go √© parecido com a busca

        Caso 1: Se o n√≥ for None, eu (a fun√ß√£o recursiva ü§™) n√£o tenho mais para onde ir, ent√£o retorno None.
        Caso 2: A chave procurada √© igual a carga do n√≥, √© retornado o n√≥.

        Se a chave n√£o foi encontrada e o n√≥ n√£o √© None, a chave pode estar do lado esquerdo ou do lado direito.
        Caso 3: Chamo novamente a fun√ß√£o recursiva para o lado esquerdo e salvo em uma vari√°vel chamada recuperado, que pode ser None ou o n√≥ (caso a chave seja encontrada). Se a chave for encontrada a fun√ß√£o retorna o n√≥, se n√£o retornamos o que tiver do lado direito.
        """
        if no is None:
            return None
        if chave == no.carga:
            return no
        recuperado = self.__go(chave, no.esq)
        if recuperado is not None:
            return recuperado
        else:
            return self.__go(chave, no.dir)


arv = Arvore(100)
print(len(arv))
